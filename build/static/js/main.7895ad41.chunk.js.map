{"version":3,"sources":["contexts/CardContext.js","components/NavBar.js","components/CardDetails.js","components/CardList.js","components/CardForm.js","components/App.js","serviceWorker.js","index.js","img/logo.png"],"names":["CardContext","createContext","CardContextProvider","props","useState","name","extinct","type","diet","id","uuidv4","isEdit","cards","setCard","Provider","value","addCard","removeCard","filter","card","editCard","edit","editCards","UpdateCard","children","NavBar","useContext","className","src","Logo","width","height","alt","data-testid","length","CardDetails","index","setType","setExtinct","setDiet","charAt","onClick","placeholder","onChange","e","target","disabled","defaultValue","required","CardList","map","key","style","fontSize","NewCardForm","handleDarkMode","darkMode","setName","onSubmit","preventDefault","reset","display","htmlFor","App","setDarkMode","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message","module","exports"],"mappings":"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","file":"static/js/main.7895ad41.chunk.js","sourcesContent":["import React, {createContext, useState} from 'react'\nimport { v4 as uuidv4 } from 'uuid';\n\nexport const CardContext = createContext();\n\nconst CardContextProvider = (props) => {\n  const [cards, setCard] = useState([\n        {name: \"Lion\",  extinct:\"Extant\", type:\"mammal\", diet:\"carnivore\", id:uuidv4(), isEdit:false},\n        {name: \"Tiger\", extinct:\"Extant\", type:\"mammal\", diet:\"carnivore\", id:uuidv4(), isEdit:false},\n        {name: \"Mammuthus\", extinct:\"Extinct\", type:\"mammal\", diet:\"herbivorous\", id:uuidv4(), isEdit:false},\n        {name: \"Snake\", extinct:\"Extant\", type:\"reptile\", diet:\"carnivore\", id:uuidv4(), isEdit:false},\n        {name: \"Tuna\", extinct:\"Extinct\", type:\"fish\", diet:\"carnivore\", id:uuidv4(), isEdit:false},\n        {name: \"Frog\", extinct:\"Extant\", type:\"amphibians\", diet:\"carnivore\", id:uuidv4(), isEdit:false},\n    ]);\n\n    const addCard = (name, extinct, type, diet, isEdit,) => {\n        setCard([...cards, { name, extinct, type, diet, isEdit, id: uuidv4()}])\n    };\n\n    const removeCard = (id) => {\n        setCard(cards.filter(card => card.id !== id))\n    };\n\n    const editCard = (edit) => {\n        const editCards = [...cards];\n        editCards[edit].isEdit = true;\n        setCard(editCards);\n    }\n\n    const UpdateCard = (edit,name,type,diet,extinct) => {\n        const UpdateCard = [...cards];\n        UpdateCard[edit].name = name;\n        UpdateCard[edit].type = type;\n        UpdateCard[edit].diet = diet;\n        UpdateCard[edit].extinct = extinct;\n        UpdateCard[edit].isEdit = false;\n        setCard(UpdateCard);\n    }\n\n    return (\n        <CardContext.Provider value={{cards, addCard, removeCard, editCard, UpdateCard}}>\n           {props.children}\n        </CardContext.Provider>\n    )\n}\nexport default CardContextProvider;","import React, { useContext} from 'react'\nimport { CardContext } from '../contexts/CardContext'\nimport Logo from '../img/logo.png'\n\nconst NavBar = () => {\n  const { cards } = useContext(CardContext) \n  return (\n    <nav className=\"navbar navbar-dark bg-dark mb-5\">\n      <img src={Logo} width=\"100\" height=\"50\" alt=\"nav-logo\" />\n      <div data-testid=\"card-count\" className=\"pull-right\" > <h2 className=\"text-light\">{cards.length > 1 ? `You have ${cards.length} Cards` : (cards.length === 0) ? `GAME OVER ` : `You have ${cards.length} Card` }</h2></div>\n    </nav>\n  );\n}\n\nexport default NavBar","import React, { useContext, useState } from 'react'\nimport { CardContext } from '../contexts/CardContext'\n\nconst CardDetails = ({ card, index }) => {\n  const [type, setType] = useState(card.type)\n  const [extinct, setExtinct] = useState(card.extinct)\n  const [diet, setDiet] = useState(card.diet)\n\n  const { removeCard, editCard, UpdateCard} = useContext(CardContext)\n\n  return card.isEdit === false ? (\n    <div className=\"col-12 col-md-6 col-lg-3\">\n      <div className=\"card shadow-lg p-3 mb-5 bg-white rounded \" >\n        <div className={`random-box text-uppercase ${card.extinct === \"Extinct\" ? \"dead\" : \"text-success\"}`}><h2>{card.name.charAt(0)}</h2></div>\n        <div className=\"card-body\">\n          <h4 className=\"card-title text-center text-uppercase\">{card.name}</h4>\n          <p className=\"card-title font-weight-lighter\"><strong>Type:</strong> {card.type}</p>\n          <p className=\"card-text font-weight-lighter\"><strong>Diet:</strong>  {card.diet} </p>\n\n          <p className={`card-text font-weight ${card.extinct === \"Extinct\" ? \"text-danger\" : \"text-success\"}`}>{card.extinct}</p>\n          <div className=\"text-left\">\n            <i onClick={() => { editCard(index) }} className=\"fas fa-edit mr-3\"></i>\n            <i onClick={() => { removeCard(card.id) }} className=\"fas fa-trash-alt\"></i>\n          </div> \n        </div>\n      </div>\n    </div>\n\n  ) : (\n      <div className=\"col-12 col-md-6 col-lg-3\">\n        <div className=\"card shadow-lg p-3 mb-5 bg-white rounded\">\n          <div className=\"random-box\"> <input type=\"text\" className=\"custom-select animal-name\" placeholder={card.name} onChange={(e) => { card.name = e.target.value }} /></div>\n          <div className=\"card-body\">\n            <div><span className=\"card-title font-weight-lighter\"><strong>Type:</strong>  </span><select className=\"custom-select\" name=\"type\" onChange={(e) => setType(e.target.value)}>\n              <option disabled >Choose</option>\n              <option value=\"mammal\">mammal</option>\n              <option value=\"reptile\">reptile</option>\n              <option value=\"fish\">fish</option>\n              <option value=\"amphibious\">amphibious</option>\n            </select>\n            </div>\n            <div><span className=\"card-title font-weight-lighter\"><strong>Diet:</strong> </span><select className=\"custom-select\" id=\"diet\" defaultValue={''} onChange={(e) => setDiet(e.target.value)} required>\n              <option disabled>Choose</option>\n              <option value=\"carnivore\">carnivore</option>\n              <option value=\"herbivores\">herbivores</option>\n            </select>\n            </div>\n            <div>\n              <span className=\"card-title font-weight-lighter\"><strong>Living:</strong></span>\n              <select className=\"custom-select\" id=\"alive\" defaultValue={''} onChange={(e) => setExtinct(e.target.value)} required>\n                <option disabled>Choose</option>\n                <option value=\"Extant\">Extant</option>\n                <option value=\"Extinct\">Extinct</option>\n              </select>\n            </div>\n            <div className=\"text-left mt-3\">\n            <i onClick={() => { UpdateCard(index, card.name, type, diet,extinct) }} className=\"fas fa-save mr-3\"></i>\n\n            </div>\n          </div>\n        </div>\n      </div>\n    )\n}\n\nexport default CardDetails;","import React, { useContext } from 'react'\nimport { CardContext } from '../contexts/CardContext'\nimport CardDetails from './CardDetails'\n\nconst CardList = () => {\n    const { cards } = useContext(CardContext)\n    return cards.length ? (\n        <div className=\"container\">\n            <div className=\"row\">\n                {\n                    cards.map((card, index) => {\n                        return (<CardDetails card={card} key={card.id} index={index} />)\n                    })\n                }\n            </div>\n        </div>\n    ) : (\n            <div className=\"container\">\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <div className=\"jumbotron jumbotron-fluid text-center\">\n                            <div className=\"container\">\n                                <h1 className=\"display-4\">Game Over <i style={{fontSize:\"3rem\"}} className=\"fas fa-ghost\"></i></h1>\n                                <p className=\"lead\">You Have No Cards</p>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        )\n}\n\nexport default CardList;","import React, { useContext, useState } from 'react'\nimport { CardContext } from '../contexts/CardContext'\nimport Logo from '../img/logo.png'\n\nconst NewCardForm = ({ handleDarkMode, darkMode}) => {\n    const { addCard } = useContext(CardContext)\n    const [name, setName] = useState('')\n    const [extinct, setExtinct] = useState('Extant')\n    const [type, setType] = useState('')\n    const [diet, setDiet] = useState('')\n    const edit = false\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        addCard(name, extinct, type, diet, edit)\n        setName('')\n        e.target.reset();\n    }\n\n\n    return (\n        <div className=\"container\">\n            <form onSubmit={handleSubmit}>\n                <div className=\"row\">\n                    <div className=\"col-12\">\n                        <div className=\"card shadow-lg p-3 mb-5 bg-white rounded\" >\n                            <div className=\"card-body\">\n                                <img src={Logo} width=\"100\" height=\"50\" alt=\"\" /><h2 style={{ display: \"inline-block\" }} className=\"text-left ml-3 mb-5\">New Card</h2>\n                                <div className=\"row\">\n                                    <div className=\"col-sm-12 col-md-3\">\n                                        <label>Name</label>\n                                        <div><input className=\"custom-select animal-name\" type=\"text\" placeholder=\"Animal Name\" value={name}\n                                            onChange={(e) => setName(e.target.value)} required /></div>\n                                    </div>\n                                    <div className=\"col-sm-12 col-md-3\">\n                                        <label htmlFor=\"type\">Type</label>\n                                        <select className=\"custom-select\" id=\"type\" defaultValue={''} name=\"type\" onChange={(e) => setType(e.target.value)} required>\n                                            <option value='' disabled >Choose</option>\n                                            <option value=\"mammal\">mammal</option>\n                                            <option value=\"reptile\">reptile</option>\n                                            <option value=\"fish\">fish</option>\n                                            <option value=\"amphibious\">amphibious</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"col-sm-12 col-md-3\">\n                                        <label htmlFor=\"alive\">Diet</label>\n                                        <select className=\"custom-select\" id=\"diet\" defaultValue={''} onChange={(e) => setDiet(e.target.value)} required>\n                                            <option value='' disabled>Choose</option>\n                                            <option value=\"carnivore\">carnivore</option>\n                                            <option value=\"cerbivores\">herbivores</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"col-sm-12 col-md-3\">\n                                        <label htmlFor=\"alive\">Living</label>\n                                        <select className=\"custom-select\" id=\"alive\" defaultValue={''} onChange={(e) => setExtinct(e.target.value)} required>\n                                            <option value='' disabled>Choose</option>\n                                            <option value=\"Extant\">Extant</option>\n                                            <option value=\"Extinct\">Extinct</option>\n                                        </select>\n                                    </div>\n                                    <div className=\"col-12 text-left mt-5\"> <button className=\"btn btn-warning\" type=\"submit\"> Add Card </button>  <button className=\"btn btn-warning\" onClick={(e) => { handleDarkMode(e)  }}>{darkMode ?  <i className=\"far fa-lightbulb\"></i> :<i className=\"fas fa-lightbulb\"></i> }</button></div>\n                                </div>\n                            </div>\n                        </div>\n                    </div>\n                </div>\n            </form>\n        </div>\n\n\n\n    );\n\n}\n\nexport default NewCardForm\n","import React, { useState } from 'react';\nimport '../scss/App.scss';\nimport CardContextProvider from '../contexts/CardContext'\nimport NavBar from './NavBar';\nimport CardList from './CardList';\nimport NewCardForm from './CardForm';\n\nfunction App() {\n  const [darkMode,  setDarkMode] = useState(false)\n  const handleDarkMode = (e) =>{\n    e.preventDefault()\n    setDarkMode(!darkMode)\n  }\n  return (\n    <div className={darkMode ? \"App dark-mode\" : \"App\"}>\n        <CardContextProvider>\n          <NavBar/>\n          <CardList/>\n          <NewCardForm darkMode={darkMode} handleDarkMode={handleDarkMode}/>\n        </CardContextProvider>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.621daf44.png\";"],"sourceRoot":""}